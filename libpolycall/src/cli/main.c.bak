/**
 * @file polycall.c
 * @brief Main entry point for LibPolyCall CLI
 *
 * Provides command-line interface for LibPolyCall with support for
 * hierarchical commands, subcommands, and integrated accessibility.
 *
 * @copyright OBINexus Computing, 2025
 */

 #include "polycall/core/polycall/polycall_context.h"
 #include "polycall/core/polycall/polycall_error.h"
 #include "polycall/core/polycall/polycall_memory.h"
 #include "polycall/cli/command.h"
 #include "polycall/cli/repl.h"
 #include "polycall/core/accessibility/accessibility_interface.h"
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
 
 /**
  * @brief Get the accessibility context from the core context
  * 
  * @param core_ctx Core context
  * @return polycall_accessibility_context_t* Accessibility context or NULL
  */
 polycall_accessibility_context_t* get_accessibility_context(polycall_core_context_t* core_ctx) {
     if (!core_ctx) {
         return NULL;
     }
     
     // In a real implementation, you would retrieve the context from the core context
     // This is a placeholder implementation
     void* user_data = polycall_core_get_user_data(core_ctx);
     if (user_data) {
         // Assume the first field is the accessibility context
         return (polycall_accessibility_context_t*)user_data;
     }
     
     return NULL;
 }
 
 /**
  * @brief Initialize accessibility support
  * 
  * @param core_ctx Core context
  * @return polycall_accessibility_context_t* Initialized accessibility context or NULL
  */
 polycall_accessibility_context_t* initialize_accessibility(polycall_core_context_t* core_ctx) {
     polycall_accessibility_config_t config = polycall_accessibility_default_config();
     polycall_accessibility_context_t* access_ctx = NULL;
     
     // Initialize with Biafran theme by default
     config.color_theme = POLYCALL_THEME_BIAFRAN;
     
     // Create accessibility context
     polycall_core_error_t result = polycall_accessibility_init(
         core_ctx,
         &config,
         &access_ctx
     );
     
     if (result != POLYCALL_CORE_SUCCESS) {
         fprintf(stderr, "Failed to initialize accessibility: error %d\n", result);
         return NULL;
     }
     
     return access_ctx;
 }
 
 /**
  * @brief Main entry point for LibPolyCall CLI
  * 
  * @param argc Argument count
  * @param argv Argument vector
  * @return int Exit code
  */
 int main(int argc, char** argv) {
     polycall_core_context_t* core_ctx = NULL;
     polycall_accessibility_context_t* access_ctx = NULL;
     int result = 0;
     
     // Initialize core context
     polycall_core_error_t err = polycall_core_init(&core_ctx);
     if (err != POLYCALL_CORE_SUCCESS) {
         fprintf(stderr, "Failed to initialize LibPolyCall core: error %d\n", err);
         return 1;
     }
     
     // Initialize accessibility support
     access_ctx = initialize_accessibility(core_ctx);
     if (access_ctx) {
         // Store accessibility context in user data for later retrieval
         polycall_core_set_user_data(core_ctx, access_ctx);
     }
     
     // No arguments - start REPL
     if (argc == 1) {
         // Format welcome message with accessibility if available
         if (access_ctx) {
             char welcome[512];
             polycall_accessibility_format_text(
                 core_ctx,
                 access_ctx,
                 "LibPolyCall Interactive Shell",
                 POLYCALL_TEXT_HEADING,
                 POLYCALL_STYLE_BOLD,
                 welcome,
                 sizeof(welcome)
             );
             printf("\n%s\n\n", welcome);
         } else {
             printf("\nLibPolyCall Interactive Shell\n\n");
         }
         
         // Initialize and run REPL
         polycall_repl_config_t repl_config = polycall_repl_default_config();
         polycall_repl_context_t* repl_ctx = NULL;
         
         err = polycall_repl_init(core_ctx, &repl_config, &repl_ctx);
         if (err != POLYCALL_CORE_SUCCESS) {
             fprintf(stderr, "Failed to initialize REPL: error %d\n", err);
             result = 1;
         } else {
             err = polycall_repl_run(core_ctx, repl_ctx);
             if (err != POLYCALL_CORE_SUCCESS) {
                 fprintf(stderr, "Error in REPL: error %d\n", err);
                 result = 1;
             }
             
             polycall_repl_cleanup(core_ctx, repl_ctx);
         }
     } else {
         // Process command line arguments
         result = process_command_line(argc, argv, core_ctx);
     }
     
     // Cleanup
     if (access_ctx) {
         polycall_accessibility_cleanup(core_ctx, access_ctx);
     }
     
     polycall_core_cleanup(&core_ctx);
     return result;
 }